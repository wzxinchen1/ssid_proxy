<%+header%>
<style>
.monitor-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.monitor-panel {
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    padding: 20px;
    height: 100%;
    overflow: hidden;
}

.panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #eee;
}

.panel-title {
    font-size: 1.2em;
    font-weight: bold;
    color: #333;
}

.panel-actions {
    display: flex;
    gap: 10px;
}

.panel-btn {
    background: #f5f5f5;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 5px 10px;
    font-size: 0.85em;
    cursor: pointer;
    transition: all 0.2s;
}

.panel-btn:hover {
    background: #e9e9e9;
}

.map-container {
    height: 300px;
    background: #eef7ff;
    border-radius: 6px;
    overflow: hidden;
    position: relative;
}

.map-placeholder {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    color: #666;
    font-style: italic;
}

.connection-dot {
    position: absolute;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #ff5722;
    box-shadow: 0 0 0 4px rgba(255, 87, 34, 0.3);
    transform: translate(-50%, -50%);
    animation: pulse 1.5s infinite;
}

@keyframes pulse {
    0% { box-shadow: 0 0 0 0 rgba(255, 87, 34, 0.4); }
    70% { box-shadow: 0 0 0 10px rgba(255, 87, 34, 0); }
    100% { box-shadow: 0 0 0 0 rgba(255, 87, 34, 0); }
}

.connection-line {
    position: absolute;
    background: rgba(255, 87, 34, 0.3);
    height: 2px;
    transform-origin: left center;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 15px;
    margin-top: 15px;
}

.stat-card {
    background: #f9f9f9;
    border-radius: 6px;
    padding: 15px;
    text-align: center;
}

.stat-value {
    font-size: 1.8em;
    font-weight: bold;
    margin: 10px 0;
}

.stat-label {
    color: #666;
    font-size: 0.9em;
}

.gauge-container {
    height: 150px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.traffic-chart {
    height: 200px;
    margin-top: 15px;
}

.client-list {
    max-height: 300px;
    overflow-y: auto;
}

.client-item {
    display: flex;
    align-items: center;
    padding: 10px;
    border-bottom: 1px solid #eee;
}

.client-item:last-child {
    border-bottom: none;
}

.client-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #e0e0e0;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: 15px;
    font-size: 1.2em;
}

.client-info {
    flex: 1;
}

.client-name {
    font-weight: bold;
}

.client-details {
    font-size: 0.85em;
    color: #666;
    margin-top: 3px;
}

.client-traffic {
    text-align: right;
    font-weight: bold;
}

.domain-list {
    max-height: 300px;
    overflow-y: auto;
}

.domain-item {
    display: flex;
    justify-content: space-between;
    padding: 8px 10px;
    border-bottom: 1px solid #eee;
}

.domain-item:last-child {
    border-bottom: none;
}

.domain-name {
    display: flex;
    align-items: center;
}

.domain-icon {
    width: 24px;
    height: 24px;
    margin-right: 10px;
    background: #e0e0e0;
    border-radius: 4px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 0.8em;
}

.domain-stats {
    display: flex;
    gap: 15px;
}

.domain-traffic {
    min-width: 80px;
    text-align: right;
}

.traffic-bar {
    height: 5px;
    background: #e0e0e0;
    border-radius: 3px;
    margin-top: 5px;
    overflow: hidden;
}

.traffic-fill {
    height: 100%;
    background: #4CAF50;
}

.connections-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.9em;
}

.connections-table th {
    background-color: #f2f2f2;
    text-align: left;
    padding: 10px;
    border-bottom: 2px solid #ddd;
}

.connections-table td {
    padding: 8px 10px;
    border-bottom: 1px solid #eee;
}

.connections-table tr:hover {
    background-color: #f9f9f9;
}

.traffic-badge {
    display: inline-block;
    padding: 2px 8px;
    border-radius: 10px;
    font-size: 0.8em;
}

.traffic-in {
    background-color: #e3f2fd;
    color: #0d47a1;
}

.traffic-out {
    background-color: #e8f5e9;
    color: #1b5e20;
}

.status-indicator {
    display: inline-block;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    margin-right: 5px;
}

.status-active {
    background-color: #4CAF50;
}

.status-idle {
    background-color: #FFC107;
}

.status-closing {
    background-color: #F44336;
}

.world-map {
    width: 100%;
    height: 100%;
    background-image: url("/luci-static/resources/icons/world-map.svg");
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    position: relative;
}

.interface-tag {
    display: inline-block;
    padding: 2px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    margin-left: 8px;
}

.tag-wireless {
    background-color: #f3e5f5;
    color: #6a1b9a;
    border: 1px solid #ce93d8;
}

.tag-ethernet {
    background-color: #e3f2fd;
    color: #0d47a1;
    border: 1px solid #90caf9;
}

.tag-bridge {
    background-color: #e8f5e9;
    color: #1b5e20;
    border: 1px solid #a5d6a7;
}

.tag-vlan {
    background-color: #fff8e1;
    color: #7d6608;
    border: 1px solid #ffe082;
}

.interface-status {
    display: inline-block;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    margin-right: 5px;
}

.interface-up {
    background-color: #4CAF50;
}

.interface-down {
    background-color: #F44336;
}

/* 响应式调整 */
@media (max-width: 1200px) {
    .monitor-container {
        grid-template-columns: 1fr;
    }
}
</style>

<script>
// 模拟数据生成函数
function generateMockData() {
    return {
        connections: [
            { id: 1, client: '192.168.1.101', device: '安卓手机', country: 'CN', target: 'google.com:443', duration: '2分15秒', trafficIn: '1.2MB', trafficOut: '0.8MB', status: 'active', interface: 'br-lan', ifaceType: 'bridge' },
            { id: 2, client: '192.168.1.102', device: 'Windows PC', country: 'US', target: 'youtube.com:443', duration: '5分42秒', trafficIn: '4.7MB', trafficOut: '1.1MB', status: 'active', interface: 'eth0.2', ifaceType: 'vlan' },
            { id: 3, client: '192.168.1.103', device: 'iPhone', country: 'JP', target: 'apple.com:443', duration: '1分03秒', trafficIn: '0.5MB', trafficOut: '0.2MB', status: 'idle', interface: 'wlan0', ifaceType: 'wireless' },
            { id: 4, client: '192.168.1.104', device: 'MacBook', country: 'GB', target: 'github.com:443', duration: '3分28秒', trafficIn: '2.1MB', trafficOut: '0.9MB', status: 'closing', interface: 'eth1', ifaceType: 'ethernet' },
            { id: 5, client: '192.168.1.105', device: 'iPad', country: 'DE', target: 'netflix.com:443', duration: '8分12秒', trafficIn: '6.3MB', trafficOut: '1.5MB', status: 'active', interface: 'br-guest', ifaceType: 'bridge' }
        ],
        clients: [
            { id: 1, name: '张三的手机', ip: '192.168.1.101', device: '安卓', os: 'Android 12', traffic: '2.1GB', interface: 'br-lan' },
            { id: 2, name: '李四的笔记本', ip: '192.168.1.102', device: 'Windows PC', os: 'Windows 11', traffic: '4.7GB', interface: 'eth0.2' },
            { id: 3, name: '王五的平板', ip: '192.168.1.103', device: 'iPad', os: 'iOS 15', traffic: '1.2GB', interface: 'wlan0' },
            { id: 4, name: '客厅电视', ip: '192.168.1.104', device: '智能电视', os: 'Android TV', traffic: '3.5GB', interface: 'eth1' },
            { id: 5, name: '赵六的工作站', ip: '192.168.1.105', device: 'Mac Mini', os: 'macOS 12', traffic: '5.8GB', interface: 'br-guest' }
        ],
        domains: [
            { id: 1, name: 'youtube.com', category: '视频', traffic: '8.4GB', percentage: 35, interface: 'br-lan' },
            { id: 2, name: 'netflix.com', category: '视频', traffic: '6.2GB', percentage: 26, interface: 'eth0.2' },
            { id: 3, name: 'google.com', category: '搜索', traffic: '3.1GB', percentage: 13, interface: 'wlan0' },
            { id: 4, name: 'amazon.com', category: '购物', traffic: '2.4GB', percentage: 10, interface: 'eth1' },
            { id: 5, name: 'github.com', category: '开发', traffic: '1.8GB', percentage: 7, interface: 'br-guest' },
            { id: 6, name: 'steampowered.com', category: '游戏', traffic: '1.2GB', percentage: 5, interface: 'br-lan' },
            { id: 7, name: '其他', category: '其他', traffic: '1.1GB', percentage: 4, interface: 'eth0.2' }
        ],
        stats: {
            cpu: 42,
            memory: 65,
            latency: 28,
            successRate: 98.7,
            activeConnections: 12,
            dailyTraffic: '24.3GB'
        }
    };
}

// 获取接口类型标签
function getInterfaceTag(type) {
    const types = {
        'wireless': { class: 'tag-wireless', text: '无线' },
        'ethernet': { class: 'tag-ethernet', text: '有线' },
        'bridge': { class: 'tag-bridge', text: '网桥' },
        'vlan': { class: 'tag-vlan', text: 'VLAN' }
    };
    
    const info = types[type] || { class: '', text: '其他' };
    return `<span class="interface-tag ${info.class}">${info.text}</span>`;
}

// 初始化监控页面
function initMonitor() {
    const data = generateMockData();
    
    // 更新性能指标
    updatePerformanceStats(data.stats);
    
    // 渲染连接地图
    renderConnectionMap(data.connections);
    
    // 渲染客户端列表
    renderClientList(data.clients);
    
    // 渲染域名排行
    renderDomainRanking(data.domains);
    
    // 渲染活跃连接
    renderActiveConnections(data.connections);
    
    // 启动实时更新
    setInterval(updateRealTimeData, 5000);
}

// 更新性能指标
function updatePerformanceStats(stats) {
    document.getElementById('cpu-value').textContent = stats.cpu + '%';
    document.getElementById('memory-value').textContent = stats.memory + '%';
    document.getElementById('latency-value').textContent = stats.latency + 'ms';
    document.getElementById('success-value').textContent = stats.successRate + '%';
    document.getElementById('connections-value').textContent = stats.activeConnections;
    document.getElementById('traffic-value').textContent = stats.dailyTraffic;
    
    // 更新仪表盘
    updateGauge('cpu-gauge', stats.cpu);
    updateGauge('memory-gauge', stats.memory);
    updateGauge('latency-gauge', Math.min(stats.latency, 100));
    updateGauge('success-gauge', stats.successRate);
}

// 更新仪表盘
function updateGauge(id, value) {
    const gauge = document.getElementById(id);
    if (!gauge) return;
    
    // 清除旧内容
    gauge.innerHTML = '';
    
    // 创建SVG仪表盘
    const svgNS = "http://www.w3.org/2000/svg";
    const svg = document.createElementNS(svgNS, "svg");
    svg.setAttribute("width", "120");
    svg.setAttribute("height", "80");
    svg.setAttribute("viewBox", "0 0 120 80");
    
    // 仪表盘背景
    const bgArc = document.createElementNS(svgNS, "path");
    bgArc.setAttribute("d", "M20,70 A50,50 0 0,1 100,70");
    bgArc.setAttribute("fill", "none");
    bgArc.setAttribute("stroke", "#e0e0e0");
    bgArc.setAttribute("stroke-width", "10");
    svg.appendChild(bgArc);
    
    // 仪表盘值
    const valueArc = document.createElementNS(svgNS, "path");
    const startAngle = 180;
    const endAngle = 180 + (value / 100) * 180;
    const startRad = (startAngle * Math.PI) / 180;
    const endRad = (endAngle * Math.PI) / 180;
    const x1 = 60 + 50 * Math.cos(startRad);
    const y1 = 70 + 50 * Math.sin(startRad);
    const x2 = 60 + 50 * Math.cos(endRad);
    const y2 = 70 + 50 * Math.sin(endRad);
    
    valueArc.setAttribute("d", `M${x1},${y1} A50,50 0 0,1 ${x2},${y2}`);
    valueArc.setAttribute("fill", "none");
    valueArc.setAttribute("stroke", getGaugeColor(id, value));
    valueArc.setAttribute("stroke-width", "10");
    valueArc.setAttribute("stroke-linecap", "round");
    svg.appendChild(valueArc);
    
    // 仪表盘指针
    const pointer = document.createElementNS(svgNS, "line");
    pointer.setAttribute("x1", "60");
    pointer.setAttribute("y1", "70");
    pointer.setAttribute("x2", x2);
    pointer.setAttribute("y2", y2);
    pointer.setAttribute("stroke", "#333");
    pointer.setAttribute("stroke-width", "2");
    svg.appendChild(pointer);
    
    // 仪表盘中心点
    const center = document.createElementNS(svgNS, "circle");
    center.setAttribute("cx", "60");
    center.setAttribute("cy", "70");
    center.setAttribute("r", "4");
    center.setAttribute("fill", "#333");
    svg.appendChild(center);
    
    // 添加值文本
    const text = document.createElementNS(svgNS, "text");
    text.setAttribute("x", "60");
    text.setAttribute("y", "50");
    text.setAttribute("text-anchor", "middle");
    text.setAttribute("font-size", "14");
    text.setAttribute("fill", "#333");
    text.textContent = value + (id === 'latency-gauge' ? 'ms' : '%');
    svg.appendChild(text);
    
    gauge.appendChild(svg);
}

// 获取仪表盘颜色
function getGaugeColor(id, value) {
    if (id === 'cpu-gauge' || id === 'memory-gauge') {
        if (value < 50) return '#4CAF50';
        if (value < 75) return '#FFC107';
        return '#F44336';
    }
    
    if (id === 'latency-gauge') {
        if (value < 30) return '#4CAF50';
        if (value < 60) return '#FFC107';
        return '#F44336';
    }
    
    if (id === 'success-gauge') {
        if (value > 95) return '#4CAF50';
        if (value > 90) return '#FFC107';
        return '#F44336';
    }
    
    return '#2196F3';
}

// 渲染连接地图
function renderConnectionMap(connections) {
    const mapContainer = document.getElementById('connection-map');
    if (!mapContainer) return;
    
    // 清除旧内容
    mapContainer.innerHTML = '<div class="world-map"></div>';
    const worldMap = mapContainer.querySelector('.world-map');
    
    // 国家坐标映射（简化的坐标）
    const countryCoords = {
        'CN': { x: 75, y: 40 },
        'US': { x: 25, y: 35 },
        'JP': { x: 85, y: 35 },
        'GB': { x: 48, y: 30 },
        'DE': { x: 52, y: 30 },
        'FR': { x: 50, y: 32 },
        'RU': { x: 65, y: 25 },
        'BR': { x: 35, y: 60 },
        'IN': { x: 70, y: 45 },
        'AU': { x: 90, y: 70 }
    };
    
    // 添加连接点
    connections.forEach(conn => {
        if (countryCoords[conn.country]) {
            const coords = countryCoords[conn.country];
            
            // 创建连接点
            const dot = document.createElement('div');
            dot.className = 'connection-dot';
            dot.style.left = coords.x + '%';
            dot.style.top = coords.y + '%';
            dot.title = `${conn.country}: ${conn.target} (接口: ${conn.interface})`;
            worldMap.appendChild(dot);
            
            // 创建连接到中国的线
            const line = document.createElement('div');
            line.className = 'connection-line';
            line.style.left = '50%';
            line.style.top = '50%';
            
            // 计算线的长度和角度
            const dx = coords.x - 50;
            const dy = coords.y - 50;
            const length = Math.sqrt(dx * dx + dy * dy);
            const angle = Math.atan2(dy, dx) * 180 / Math.PI;
            
            line.style.width = length + '%';
            line.style.transform = `rotate(${angle}deg)`;
            worldMap.appendChild(line);
        }
    });
    
    // 添加中国中心点
    const centerDot = document.createElement('div');
    centerDot.className = 'connection-dot';
    centerDot.style.backgroundColor = '#2196F3';
    centerDot.style.boxShadow = '0 0 0 4px rgba(33, 150, 243, 0.3)';
    centerDot.style.left = '50%';
    centerDot.style.top = '50%';
    centerDot.title = '中国 (路由器位置)';
    worldMap.appendChild(centerDot);
}

// 渲染客户端列表
function renderClientList(clients) {
    const container = document.getElementById('client-list');
    if (!container) return;
    
    container.innerHTML = '';
    
    clients.forEach(client => {
        const item = document.createElement('div');
        item.className = 'client-item';
        
        // 设备类型图标
        const deviceIcons = {
            'Windows PC': '💻',
            'Mac Mini': '🖥️',
            '安卓手机': '📱',
            'iPhone': '📱',
            'iPad': '📱',
            '智能电视': '📺'
        };
        
        const icon = deviceIcons[client.device] || '📶';
        
        // 接口标签
        const ifaceTag = getInterfaceTag(client.ifaceType || 'ethernet');
        
        item.innerHTML = `
            <div class="client-avatar">${icon}</div>
            <div class="client-info">
                <div class="client-name">${client.name}</div>
                <div class="client-details">${client.device} | ${client.os} | ${client.ip}</div>
                <div class="client-interface">
                    <span class="interface-tag ${client.ifaceType ? 'tag-' + client.ifaceType : 'tag-ethernet'}">
                        ${client.interface}
                    </span>
                </div>
            </div>
            <div class="client-traffic">${client.traffic}</div>
        `;
        
        container.appendChild(item);
    });
}

// 渲染域名排行
function renderDomainRanking(domains) {
    const container = document.getElementById('domain-ranking');
    if (!container) return;
    
    container.innerHTML = '';
    
    domains.forEach(domain => {
        const item = document.createElement('div');
        item.className = 'domain-item';
        
        // 类别图标
        const categoryIcons = {
            '视频': '🎬',
            '搜索': '🔍',
            '购物': '🛒',
            '开发': '💻',
            '游戏': '🎮',
            '社交': '👥',
            '其他': '🌐'
        };
        
        const icon = categoryIcons[domain.category] || '🌐';
        
        // 接口标签
        const ifaceTag = getInterfaceTag(domain.ifaceType || 'ethernet');
        
        item.innerHTML = `
            <div class="domain-name">
                <div class="domain-icon">${icon}</div>
                <div>
                    <div>${domain.name}</div>
                    <div style="font-size:0.8em;color:#888;">${domain.category}</div>
                    <div style="font-size:0.75em;margin-top:3px;">
                        <span class="interface-tag ${domain.ifaceType ? 'tag-' + domain.ifaceType : 'tag-ethernet'}">
                            ${domain.interface}
                        </span>
                    </div>
                </div>
            </div>
            <div class="domain-stats">
                <div class="domain-traffic">${domain.traffic}</div>
                <div style="min-width:100px;">
                    <div>${domain.percentage}%</div>
                    <div class="traffic-bar">
                        <div class="traffic-fill" style="width:${domain.percentage}%"></div>
                    </div>
                </div>
            </div>
        `;
        
        container.appendChild(item);
    });
}

// 渲染活跃连接
function renderActiveConnections(connections) {
    const container = document.getElementById('active-connections');
    if (!container) return;
    
    container.innerHTML = '';
    
    // 创建表格
    const table = document.createElement('table');
    table.className = 'connections-table';
    
    // 表头
    table.innerHTML = `
        <thead>
            <tr>
                <th>客户端</th>
                <th>设备</th>
                <th>目标地址</th>
                <th>国家</th>
                <th>接口</th>
                <th>持续时间</th>
                <th>流量</th>
                <th>状态</th>
            </tr>
        </thead>
        <tbody></tbody>
    `;
    
    const tbody = table.querySelector('tbody');
    
    // 添加行
    connections.forEach(conn => {
        const row = document.createElement('tr');
        
        // 状态指示器
        const statusClass = {
            'active': 'status-active',
            'idle': 'status-idle',
            'closing': 'status-closing'
        }[conn.status] || '';
        
        const statusText = {
            'active': '活跃',
            'idle': '空闲',
            'closing': '关闭中'
        }[conn.status] || conn.status;
        
        // 接口标签
        const ifaceTag = getInterfaceTag(conn.ifaceType || 'ethernet');
        
        row.innerHTML = `
            <td>${conn.client}</td>
            <td>${conn.device}</td>
            <td>${conn.target}</td>
            <td>${conn.country}</td>
            <td>
                <span class="interface-tag ${conn.ifaceType ? 'tag-' + conn.ifaceType : 'tag-ethernet'}">
                    ${conn.interface}
                </span>
            </td>
            <td>${conn.duration}</td>
            <td>
                <span class="traffic-badge traffic-in">${conn.trafficIn} 入</span>
                <span class="traffic-badge traffic-out">${conn.trafficOut} 出</span>
            </td>
            <td>
                <span class="status-indicator ${statusClass}"></span>
                ${statusText}
            </td>
        `;
        
        tbody.appendChild(row);
    });
    
    container.appendChild(table);
}

// 实时更新数据
function updateRealTimeData() {
    // 这里应该是从服务器获取实时数据
    // 现在使用模拟数据
    const data = generateMockData();
    
    // 随机更新一些值
    data.stats.cpu = Math.min(100, Math.max(5, data.stats.cpu + (Math.random() * 10 - 5)));
    data.stats.memory = Math.min(100, Math.max(10, data.stats.memory + (Math.random() * 5 - 2.5)));
    data.stats.latency = Math.min(200, Math.max(10, data.stats.latency + (Math.random() * 10 - 5)));
    data.stats.activeConnections = Math.max(1, data.connections.length + Math.floor(Math.random() * 3 - 1));
    
    // 更新显示
    updatePerformanceStats(data.stats);
}

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', initMonitor);
</script>

<h2><a id="content" name="content">接口代理监控中心</a></h2>

<div class="monitor-container">
    <!-- 左侧列 -->
    <div>
        <!-- 连接地图面板 -->
        <div class="monitor-panel">
            <div class="panel-header">
                <div class="panel-title">全球连接分布</div>
                <div class="panel-actions">
                    <div class="panel-btn">实时刷新</div>
                    <div class="panel-btn">缩放调整</div>
                </div>
            </div>
            <div id="connection-map" class="map-container">
                <div class="map-placeholder">正在加载连接地图...</div>
            </div>
        </div>
        
        <!-- 性能指标面板 -->
        <div class="monitor-panel">
            <div class="panel-header">
                <div class="panel-title">性能指标</div>
                <div class="panel-actions">
                    <div class="panel-btn">历史趋势</div>
                </div>
            </div>
            <div class="stats-grid">
                <div class="stat-card">
                    <div>CPU 使用率</div>
                    <div id="cpu-value" class="stat-value">0%</div>
                    <div id="cpu-gauge" class="gauge-container"></div>
                </div>
                <div class="stat-card">
                    <div>内存使用率</div>
                    <div id="memory-value" class="stat-value">0%</div>
                    <div id="memory-gauge" class="gauge-container"></div>
                </div>
                <div class="stat-card">
                    <div>平均延迟</div>
                    <div id="latency-value" class="stat-value">0ms</div>
                    <div id="latency-gauge" class="gauge-container"></div>
                </div>
                <div class="stat-card">
                    <div>连接成功率</div>
                    <div id="success-value" class="stat-value">0%</div>
                    <div id="success-gauge" class="gauge-container"></div>
                </div>
            </div>
        </div>
        
        <!-- 活跃连接面板 -->
        <div class="monitor-panel">
            <div class="panel-header">
                <div class="panel-title">活跃连接</div>
                <div class="panel-actions">
                    <div class="panel-btn">刷新列表</div>
                </div>
            </div>
            <div id="active-connections"></div>
        </div>
    </div>
    
    <!-- 右侧列 -->
    <div>
        <!-- 流量统计面板 -->
        <div class="monitor-panel">
            <div class="panel-header">
                <div class="panel-title">流量统计</div>
                <div class="panel-actions">
                    <div class="panel-btn">今日</div>
                    <div class="panel-btn">本周</div>
                    <div class="panel-btn">本月</div>
                </div>
            </div>
            <div class="stats-grid">
                <div class="stat-card">
                    <div>活跃连接数</div>
                    <div id="connections-value" class="stat-value">0</div>
                    <div class="stat-label">当前在线设备</div>
                </div>
                <div class="stat-card">
                    <div>今日总流量</div>
                    <div id="traffic-value" class="stat-value">0GB</div>
                    <div class="stat-label">入站 + 出站</div>
                </div>
            </div>
            <div class="traffic-chart">
                <div style="text-align:center; padding:40px 0; color:#888; font-style:italic;">
                    流量趋势图表将显示在这里
                </div>
            </div>
        </div>
        
        <!-- 客户端排行面板 -->
        <div class="monitor-panel">
            <div class="panel-header">
                <div class="panel-title">客户端流量排行</div>
                <div class="panel-actions">
                    <div class="panel-btn">全部设备</div>
                </div>
            </div>
            <div id="client-list" class="client-list"></div>
        </div>
        
        <!-- 域名排行面板 -->
        <div class="monitor-panel">
            <div class="panel-header">
                <div class="panel-title">域名访问排行</div>
                <div class="panel-actions">
                    <div class="panel-btn">刷新</div>
                </div>
            </div>
            <div id="domain-ranking" class="domain-list"></div>
        </div>
    </div>
</div>

<%+footer%>
